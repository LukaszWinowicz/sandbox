@using System.Collections.Generic
@using System.Linq
@using KERP.Domain.Results

@typeparam TItem where TItem : class

<h3>@PageTitle</h3>
<p>@PageDescription</p>

<FluentCard Style="padding: 20px;">
    @if (IsProcessing)
    {
        <div class="overlay">
            <FluentProgressRing />
            <p style="margin-top: 10px;">Processing...</p>
        </div>
    }

    <div class="form-grid-header">
        @* Tutaj wstrzykniemy nagłówki kolumn z zewnątrz *@
        @HeaderTemplate
        <div style="width: 50px;"></div>
    </div>

    @* Pętla do wyświetlania wierszy *@
    @foreach (var item in Items)
    {
        <div class="form-grid-row" @key="item">
            @* Tutaj wstrzykniemy pola formularza dla jednego wiersza *@
            @RowTemplate(item)
            <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" OnClick="@(() => RemoveRow(item))" Appearance="Appearance.Stealth" Title="Remove row" />
        </div>
    }

    <FluentStack HorizontalAlignment="HorizontalAlignment.End" Class="mt-3" Style="gap: 10px;">
        <FluentButton OnClick="AddRow">Add Row</FluentButton>
        <FluentButton Appearance="Appearance.Accent" @onclick="HandleProcessing">Process All Rows</FluentButton>
    </FluentStack>
</FluentCard>

@if (validationHasRun)
{
    @if (ProcessingResults != null && ProcessingResults.Any(r => !r.IsValid))
    {
        <div class="alert alert-danger mt-4">
            <h5>Validation finished. Found errors in @ProcessingResults.Count(r => !r.IsValid) row(s):</h5>
            @foreach (var result in ProcessingResults.Where(r => !r.IsValid))
            {
                <div class="mt-2">
                    <strong>Row @result.RowNumber:</strong>
                    <ul>
                        @foreach (var error in result.Errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-success mt-4">
            <strong>Validation successful!</strong> All rows have been processed correctly.
        </div>
    }
}

@code {
    // --- Parametry konfiguracyjne dla szablonu ---
    [Parameter] public string PageTitle { get; set; } = "Mass Update";
    [Parameter] public string PageDescription { get; set; } = "Enter data and process.";
    [Parameter] public RenderFragment? HeaderTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }
    [Parameter] public Func<TItem>? NewItemFactory { get; set; }
    [Parameter] public Func<List<TItem>, Task<List<RowValidationResult>>>? ProcessRequestFunc { get; set; }

    // --- Stan wewnętrzny komponentu ---
    private List<TItem> Items { get; set; } = new();
    private List<RowValidationResult> ProcessingResults { get; set; } = new();
    private bool IsProcessing { get; set; }
    private bool validationHasRun = false;

    protected override void OnInitialized()
    {
        if (!Items.Any() && NewItemFactory != null)
        {
            AddRow();
        }
    }

    private void AddRow()
    {
        if (NewItemFactory != null)
        {
            var newItem = NewItemFactory.Invoke();
            Items.Add(newItem);
        }
    }

    private void RemoveRow(TItem itemToRemove)
    {
        Items.Remove(itemToRemove);
    }

    private async Task HandleProcessing()
    {
        if (ProcessRequestFunc == null) return;

        IsProcessing = true;
        validationHasRun = true;
        ProcessingResults.Clear();

        ProcessingResults = await ProcessRequestFunc(Items);

        IsProcessing = false;
    }
}

<style>
    .form-grid-header, .form-grid-row {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr 2fr 1.5fr 50px;
        gap: 16px;
        align-items: center;
        margin-bottom: 8px;
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 10;
        border-radius: var(--fluent-border-radius);
    }
</style>