@page "/mass-update"
@using KERP.Application.Features.MassUpdates.PurchaseOrder.UpdateReceiptDate
@using KERP.Application.Features.MassUpdates.PurchaseOrder.GetChangeRequests
@using KERP.Application.Common.Abstractions
@using KERP.Domain.Aggregates.PurchaseOrder

@* ✨ KROK 1: Wstrzykujemy OBA dispatchery ✨ *@
@inject ICommandDispatcher CommandDispatcher
@inject IQueryDispatcher QueryDispatcher
@rendermode InteractiveServer

<h3>Masowa aktualizacja dat odbioru</h3>

@if (!string.IsNullOrWhiteSpace(_feedbackMessage))
{
    <div class="alert alert-info my-3">@_feedbackMessage</div>
}

<EditForm Model="@_lines" OnValidSubmit="HandleSubmit">

    <div class="mb-3">
        <label for="dateType" class="form-label">Typ Daty:</label>
        <InputSelect id="dateType" @bind-Value="_selectedDateType" class="form-select">
            @foreach (var type in Enum.GetValues<ReceiptDateUpdateType>())
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Nr Zamówienia (PO)</th>
                <th>Nr Linii</th>
                <th>Sekwencja</th>
                <th>Nowa Data Odbioru</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var line in _lines)
            {
                <tr>
                    <td><InputText @bind-Value="line.PurchaseOrder" class="form-control" /></td>
                    <td><InputNumber @bind-Value="line.LineNumber" class="form-control" /></td>
                    <td><InputNumber @bind-Value="line.Sequence" class="form-control" /></td>
                    <td><InputDate @bind-Value="line.NewReceiptDate" class="form-control" /></td>
                </tr>
            }
        </tbody>
    </table>

    <button type="button" class="btn btn-secondary me-2" @onclick="AddNewLine">Dodaj nowy wiersz</button>
    <button type="submit" class="btn btn-primary">Wyślij żądania</button>

</EditForm>

@* ✨ KROK 2: Dodajemy tabelę do wyświetlania wyników ✨ *@
<hr class="my-4" />
<h3>Ostatnio dodane żądania</h3>

@if (_requests is null)
{
    <p><em>Ładowanie...</em></p>
}
else if (!_requests.Any())
{
    <p>Brak danych do wyświetlenia.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nr Zamówienia</th>
                <th>Data Żądania</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in _requests)
            {
                <tr>
                    <td>@request.Id</td>
                    <td>@request.PurchaseOrder</td>
                    <td>@request.CreatedAtUtc.ToLocalTime()</td>
                    <td>@(request.IsProcessed ? "Przetworzone" : "Oczekujące")</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private class FormLineModel
    {
        public string? PurchaseOrder { get; set; }
        public int LineNumber { get; set; }
        public int Sequence { get; set; }
        public DateTime NewReceiptDate { get; set; } = DateTime.Now;
    }

    private List<FormLineModel> _lines = new();
    private ReceiptDateUpdateType _selectedDateType = ReceiptDateUpdateType.Confirmed;
    private string? _feedbackMessage;

    // ✨ KROK 3: Zmienna do przechowywania wyników z zapytania ✨
    private List<ChangeRequestDto>? _requests;

    // ✨ KROK 4: Logika ładowania i odświeżania danych ✨
    protected override async Task OnInitializedAsync()
    {
        AddNewLine();
        await LoadRequests();
    }

    private async Task LoadRequests()
    {
        _requests = await QueryDispatcher.Send(new GetChangeRequestsQuery());
    }

    private void AddNewLine() => _lines.Add(new FormLineModel());

    private async Task HandleSubmit()
    {
        _feedbackMessage = "Przetwarzanie...";

        var orderLineDtos = _lines
            .Where(l => !string.IsNullOrWhiteSpace(l.PurchaseOrder))
            .Select(l => new OrderLineDto(l.PurchaseOrder!, l.LineNumber, l.Sequence, l.NewReceiptDate))
            .ToList();

        if (!orderLineDtos.Any())
        {
            _feedbackMessage = "Dodaj przynajmniej jedno żądanie.";
            return;
        }

        var command = new RequestPurchaseOrderReceiptDateChangeCommand
        {
            OrderLines = orderLineDtos,
            DateType = _selectedDateType
        };

        var result = await CommandDispatcher.Send(command);

        if (result.IsSuccess)
        {
            _feedbackMessage = "Sukces! Żądania zostały poprawnie wysłane i zapisane.";
            _lines.Clear();
            AddNewLine();
            await LoadRequests(); // Odświeżamy tabelę po udanym zapisie
        }
        else
        {
            _feedbackMessage = $"Wystąpił błąd: {result.Error.Description}";
        }
    }
}

