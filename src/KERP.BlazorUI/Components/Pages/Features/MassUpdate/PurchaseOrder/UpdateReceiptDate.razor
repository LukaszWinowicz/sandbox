@page "/mass-update/purchase-order/update-receipt-date"
@using KERP.Application.Common.Abstractions
@using KERP.Application.Common.Models
@using KERP.Application.Common.Validation
@using KERP.Application.Features.MassUpdates.PurchaseOrder.UpdateReceiptDate
@using KERP.Domain.Aggregates.PurchaseOrder
@rendermode InteractiveServer

@inject ICommandDispatcher CommandDispatcher

<h3>Update Purchase Order Receipt Date</h3>
<p>Enter or paste data to create requests for updating receipt dates.</p>

<DynamicUpdateForm TLineModel="FormLineModel"
                   ProcessRequestFunc="ProcessRows"
                   TableHeaderTemplate="TableHeader"
                   TableRowTemplate="TableRow">
</DynamicUpdateForm>

@code {
    // Definicja modelu dla wiersza formularza
    public class FormLineModel
    {
        public string? PurchaseOrder { get; set; }
        public int LineNumber { get; set; }
        public int Sequence { get; set; }
        public DateTime NewReceiptDate { get; set; } = DateTime.Today;
    }

    // Definicja szablonu dla nagłówków tabeli
    private RenderFragment TableHeader => __builder =>
    {
        <th>Purchase Order</th>
        <th>Line</th>
        <th>Sequence</th>
        <th>New Receipt Date</th>
    };

    // Definicja szablonu dla wiersza tabeli
    private RenderFragment<FormLineModel> TableRow => line => __builder =>
    {
        <tr>
            <td><InputText @bind-Value="line.PurchaseOrder" class="form-control" /></td>
            <td><InputNumber @bind-Value="line.LineNumber" class="form-control" /></td>
            <td><InputNumber @bind-Value="line.Sequence" class="form-control" /></td>
            <td><InputDate @bind-Value="line.NewReceiptDate" class="form-control" /></td>
        </tr>
    };

    // Pole do przechowywania dodatkowych danych z UI
    private ReceiptDateUpdateType _selectedDateType = ReceiptDateUpdateType.Confirmed;

    // Funkcja przetwarzająca, przekazywana jako parametr
    private async Task<Result<List<RowValidationResult>>> ProcessRows(List<FormLineModel> models)
    {
        var validationResults = new List<RowValidationResult>();
        var validDtos = new List<OrderLineDto>();
        int rowNumber = 1;

        // Krok 1: Ręczna walidacja każdego wiersza
        foreach (var model in models)
        {
            if (string.IsNullOrWhiteSpace(model.PurchaseOrder))
            {
                // Jeśli wiersz jest pusty, dodajemy błąd walidacji i przechodzimy dalej
                validationResults.Add(RowValidationResult.WithErrors(rowNumber, null));
            }
            else
            {
                // Jeśli wiersz jest poprawny, mapujemy go na DTO i dodajemy do listy do przetworzenia
                validDtos.Add(new OrderLineDto(model.PurchaseOrder!, model.LineNumber, model.Sequence, model.NewReceiptDate));
            }
            rowNumber++;
        }

        // Krok 2: Jeśli były jakiekolwiek poprawne wiersze, wyślij je do handlera
        if (validDtos.Any())
        {
            var command = new RequestPurchaseOrderReceiptDateChangeCommand
            {
                OrderLines = validDtos,
                DateType = _selectedDateType
            };

            var handlerResult = await CommandDispatcher.Send(command);

            if (handlerResult.IsSuccess)
            {
                // Łączymy wyniki walidacji z wynikami z handlera
                // Handler zwróci sukcesy dla przetworzonych wierszy, a my mamy już błędy
                validationResults.AddRange(handlerResult.Value);
            }
            else
            {
                // Jeśli cały handler zwrócił błąd, dodajemy go jako błąd ogólny
                validationResults.Add(RowValidationResult.WithErrors(0, null));
            }
        }

        // Krok 3: Zawsze zwracamy sukces z listą wyników
        return Result.Success(validationResults);
    }

}