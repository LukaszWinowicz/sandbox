@page "/mass-update/purchase-order/receipt-date"
@using KERP.Application.Features.MassUpdate.Commands
@using KERP.BlazorUI.Components.Shared.MassUpdate
@using KERP.Domain.MassUpdate.Enums
@using KERP.Domain.Results
@using KERP.Infrastructure.Messaging

@rendermode InteractiveServer

@inject DiyMediator Mediator

<MassUpdatePageLayout TItem="PurchaseOrderReceiptDateUpdateCommand"
                      PageTitle="Mass Update - Purchase Order Receipt Date"
                      PageDescription="Enter or paste data to update receipt dates for Purchase Orders."
                      NewItemFactory="@CreateNewCommand"
                      ProcessRequestFunc="@ProcessRowsAsync">

    <HeaderTemplate>
        <strong>Purchase Order</strong>
        <strong>Line</strong>
        <strong>Sequence</strong>
        <strong>New Receipt Date</strong>
        <strong>Date Type</strong>
    </HeaderTemplate>

    <RowTemplate>
        <FluentTextField @bind-Value="context.PurchaseOrder" />
        <FluentNumberField @bind-Value="context.LineNumber" />
        <FluentNumberField @bind-Value="context.Sequence" />
        <FluentDatePicker @bind-Value="context.ReceiptDate" />
        <FluentSelect @bind-Value="context.DateTypeAsString" Items="@(Enum.GetNames<ReceiptDateUpdateType>())" />
    </RowTemplate>

</MassUpdatePageLayout>

@code {
    private PurchaseOrderReceiptDateUpdateCommand CreateNewCommand()
    {
        return new PurchaseOrderReceiptDateUpdateCommand
        {
            PurchaseOrder = string.Empty,
            LineNumber = 0,
            Sequence = 0,
            ReceiptDate = DateTime.Today,
            DateType = ReceiptDateUpdateType.Confirmed
        };
    }

    private async Task<List<RowValidationResult>> ProcessRowsAsync(List<PurchaseOrderReceiptDateUpdateCommand> commands)
    {
        var results = new List<RowValidationResult>();
        int rowNumber = 1;
        foreach (var command in commands)
        {
            var errors = await Mediator.Send(command);
            results.Add(new RowValidationResult(rowNumber++, errors));
        }
        return results;
    }
}
