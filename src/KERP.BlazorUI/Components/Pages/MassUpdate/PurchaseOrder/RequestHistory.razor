@page "/mass-update/purchase-order/history"
@inject IQueryDispatcher QueryDispatcher
@inject ILogger<RequestHistory> Logger
@rendermode InteractiveServer

@using KERP.Application.Abstractions.Dispatcher
@using KERP.Application.Features.MassUpdate.PurchaseOrder.Queries
@using KERP.Application.Features.MassUpdate.PurchaseOrder.Queries.DTOs
@using KERP.Application.Features.MassUpdate.PurchaseOrder.Query.GetReceiptDateUpdates
@using KERP.Domain.Enums

<PageTitle>Historia żądań aktualizacji</PageTitle>

<h3>Historia żądań aktualizacji dat</h3>
<p>Poniżej znajduje się lista wszystkich wysłanych żądań aktualizacji dat odbioru.</p>

<div class="card shadow-sm mb-4">
    <div class="card-header">Filtry</div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <label for="poFilter" class="form-label">Numer zamówienia:</label>
                <InputText id="poFilter" @bind-Value="_purchaseOrderFilter" class="form-control" />
            </div>
            <div class="col-md-4">
                <label for="typeFilter" class="form-label">Typ daty:</label>
                <InputSelect id="typeFilter" @bind-Value="_dateTypeFilter" class="form-select">
                    <option value="">Wszystkie</option>
                    @foreach (var type in Enum.GetValues<ReceiptDateUpdateType>())
                    {
                        <option value="@type">@type.ToString()</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button class="btn btn-primary" @onclick="LoadRequestsAsync">Filtruj</button>
            </div>
        </div>
    </div>
</div>


@if (_isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Ładowanie danych...</span>
        </div>
        <p>Ładowanie danych...</p>
    </div>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <strong>Błąd:</strong> @_errorMessage
    </div>
}
else if (_requests is null || !_requests.Any())
{
    <div class="alert alert-info" role="alert">
        Brak danych do wyświetlenia. Spróbuj zmienić filtry lub dodaj nowe żądania.
    </div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Data utworzenia (UTC)</th>
                <th>Nr zamówienia</th>
                <th>Linia / Sekw.</th>
                <th>Nowa data</th>
                <th>Typ daty</th>
                <th>Użytkownik</th>
                <th>Przetworzono</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in _requests)
            {
                <tr>
                    <td>@request.CreatedAtUtc.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@request.PurchaseOrder</td>
                    <td>@request.LineNumber / @request.Sequence</td>
                    <td>@request.NewReceiptDate.ToShortDateString()</td>
                    <td>@request.DateType</td>
                    <td>@request.UserId</td>
                    <td>
                        <span class="badge @(request.IsProcessed ? "bg-success" : "bg-warning")">
                            @(request.IsProcessed ? "Tak" : "Nie")
                        </span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<PurchaseOrderReceiptDateUpdateRequestDto>? _requests;
    private bool _isLoading = true;
    private string? _errorMessage;

    // Pola dla filtrów
    private string? _purchaseOrderFilter;
    private ReceiptDateUpdateType? _dateTypeFilter;

    protected override async Task OnInitializedAsync()
    {
        await LoadRequestsAsync();
    }

    private async Task LoadRequestsAsync()
    {
        _isLoading = true;
        _errorMessage = null;

        try
        {
            // 1. Stwórz obiekt zapytania z wartościami z filtrów
            var query = new GetPurchaseOrderReceiptDateUpdateRequestsQuery
                {
                    PurchaseOrderFilter = _purchaseOrderFilter,
                    DateTypeFilter = _dateTypeFilter,
                    FactoryIdFilter = null // Możesz dodać filtr fabryki, jeśli jest potrzebny
                };

            // 2. Wyślij zapytanie przez dyspozytor
            _requests = await QueryDispatcher.QueryAsync(query);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Wystąpił błąd podczas pobierania historii żądań.");
            _errorMessage = $"Nie udało się załadować danych: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }
}