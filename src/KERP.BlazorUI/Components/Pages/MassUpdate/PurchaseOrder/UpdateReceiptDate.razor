@page "/mass-update/purchase-order/update-receipt-date"
@inject ICommandDispatcher CommandDispatcher
@inject ILogger<UpdateReceiptDate> Logger
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@using KERP.Application.Abstractions.Dispatcher
@using KERP.Application.Features.MassUpdate.PurchaseOrder.Commands.RequestUpdateReceiptDate
@using KERP.Application.Features.MassUpdate.PurchaseOrder.Commands.RequestUpdateReceiptDate.DTOs
@using KERP.Domain.Enums

<PageTitle>Masowa aktualizacja dat przyjęcia</PageTitle>

<h3>Masowa aktualizacja dat przyjęcia zamówień zakupu</h3>

<p>Wprowadź dane zamówień, które chcesz zaktualizować. Wszystkie pozycje zostaną zaktualizowane w ramach jednej transakcji.</p>

<EditForm Model="@_formModel" OnValidSubmit="HandleValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card shadow-sm">
        <div class="card-header">
            <h4>Szczegóły aktualizacji</h4>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="dateType" class="form-label">Typ daty do aktualizacji:</label>
                <InputSelect id="dateType" @bind-Value="_formModel.DateType" class="form-select">
                    @foreach (var type in Enum.GetValues<ReceiptDateUpdateType>())
                    {
                        <option value="@type">@type.ToString()</option>
                    }
                </InputSelect>
            </div>

            <hr />

            <h5>Linie zamówień do aktualizacji</h5>

            <table class="table table-sm table-striped">
                <thead>
                    <tr>
                        <th>Nr zamówienia</th>
                        <th>Nr linii</th>
                        <th>Sekwencja</th>
                        <th>Nowa data przyjęcia</th>
                        <th>Akcje</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var line in _formModel.OrderLines)
                    {
                        <tr>
                            <td><InputText @bind-Value="line.PurchaseOrder" class="form-control" placeholder="np. PO-12345" /></td>
                            <td><InputNumber @bind-Value="line.LineNumber" class="form-control" /></td>
                            <td><InputNumber @bind-Value="line.Sequence" class="form-control" /></td>
                            <td><InputDate @bind-Value="line.NewReceiptDate" class="form-control" /></td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveLine(line)">
                                    Usuń
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <button type="button" class="btn btn-secondary btn-sm" @onclick="AddLine">
                <span class="oi oi-plus" aria-hidden="true"></span> Dodaj kolejną linię
            </button>
        </div>
        <div class="card-footer text-end">
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    Błąd: @_errorMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @_successMessage
                </div>
            }
            <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                @if (_isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Przetwarzanie...</span>
                }
                else
                {
                    <span>Zatwierdź i wyślij do przetworzenia</span>
                }
            </button>
        </div>
    </div>
</EditForm>

@code {
    /// <summary>
    /// Klasa modelu dedykowana dla tego formularza. Używa 'set', aby umożliwić dwukierunkowe bindowanie.
    /// </summary>
    private class FormModel
    {
        public List<OrderLineDto> OrderLines { get; set; } = new();
        public ReceiptDateUpdateType DateType { get; set; } = ReceiptDateUpdateType.Confirmed;
    }

    private readonly FormModel _formModel = new();

    private bool _isSubmitting = false;
    private string? _errorMessage;
    private string? _successMessage;

    protected override void OnInitialized()
    {
        if (!_formModel.OrderLines.Any())
        {
            AddLine();
        }
    }

    private void AddLine()
    {
        _formModel.OrderLines.Add(new OrderLineDto
            {
                NewReceiptDate = DateTime.Now.Date.AddDays(7)
            });
    }

    private void RemoveLine(OrderLineDto lineToRemove)
    {
        if (_formModel.OrderLines.Count > 1)
        {
            _formModel.OrderLines.Remove(lineToRemove);
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        _isSubmitting = true;
        _errorMessage = null;
        _successMessage = null;

        var command = new RequestPurchaseOrderReceiptDateUpdateCommand
            {
                DateType = _formModel.DateType,
                OrderLines = _formModel.OrderLines
            };

        // --- ZMIANA: Obsługa wyniku zamiast try-catch ---
        var result = await CommandDispatcher.SendAsync(command); // Musisz zaktualizować Dispatcher, aby zwracał wynik

        if (result.IsFailure)
        {
            // Złączamy wszystkie błędy w jeden komunikat
            _errorMessage = string.Join("\n", result.Errors);
        }
        else
        {
            _successMessage = $"Pomyślnie wysłano {command.OrderLines.Count} linii do aktualizacji.";
            _formModel.OrderLines.Clear();
            AddLine();
        }

        _isSubmitting = false;
    }
}